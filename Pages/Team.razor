@using Core

@inject IInteropService Interop;
@inject IHeroApi API
@inject ILogger Logger;
@inject Blazored.LocalStorage.ILocalStorageService LocalStore

@page "/team"


<div class="page-header">
    <h1>My Team</h1>
</div>

<div class="container overflow-auto">
    @for (int i = 0; i < teamLength; i++)
    {
    <div class="row">
        <div class="col-2 d-flex flex-column justify-content-center">
            <div class="d-flex justify-content-end">
                <a href="/@team[i].id" class="thumbnail team-member-icon">
                    <img src="@team[i].imageUrl" alt="..." width="128px" height="128px">
                </a>
            </div>
        </div>
        <div class="col-2 d-flex flex-column justify-content-center">
            <div>
                <a href="#">
                    <h2>@team[i].nickName</h2>
                </a>
            </div>
            <div>
                <h5>@team[i].name</h5>
            </div>
            <div>
                <h3>@GetRaceName(team[i].race) @GetRankName(team[i].rank)</h3>
            </div>
        </div>
        <div class="col-2">
            @team[i].level level
        </div>
        <div class="col-6 d-flex flex-column justify-content-center">
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-default" data-toggle="modal" data-target="#exampleModal">Send badge</button>
            </div>
        </div>
    </div>}
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Send badge</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body container overflow-auto" style="height: 256px; width: 100%;">
                <div class="row">
                    Available gold coins: @goldCoins
                </div>
                <div class="row">
                    <div class="d-flex flex-wrap justify-content-between">
                        @for (int i = 0; i < @badgesLength; i++)
                        {
                            var index = i;
                            <div @onclick="() => SelectBadge(index)" class="d-flex flex-column justify-content-between">
                                <div class="d-flex justify-content-center">
                                    <div href="#" class="thumbnail achievement-badge @GetBadgeAvailabilityStyle(i) @GetBadgeSelectionStyle(i)">
                                        <img src="@badges[i].imageUrl" alt="..." width="64px" height="64px">
                                        <div>@badges[i].name</div>
                                        <span class="label label-warning">@badges[i].cost coins</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary"  data-dismiss="modal">Send</button>
            </div>
        </div>
    </div>
</div>

@code {
    TeamModel[] team;
    int teamLength = 0;
    NameModel[] ranks;
    NameModel[] races;
    BadgeModel[] badges;
    int badgesLength = 0;
    int goldCoins = 0;
    int id = 0;

    List<int> selectedBadges = new List<int>();

    string GetBadgeAvailabilityStyle(int badgeIndex)
    {
        return goldCoins < badges[badgeIndex].cost && !selectedBadges.Any(x => x == badgeIndex) ? "badge-blocked" : "badge-select";
    }

    string GetBadgeSelectionStyle(int badgeIndex)
    {
        return selectedBadges.Any(x => x == badgeIndex) ? "badge-selected" : "";
    }

    void SelectBadge(int badgeIndex)
    {
        if (selectedBadges.Any(x => x == badgeIndex))
        {
            selectedBadges.Remove(badgeIndex);
            goldCoins += badges[badgeIndex].cost;
        }
        else
        {
            if (goldCoins >= badges[badgeIndex].cost)
            {
                selectedBadges.Add(badgeIndex);
                goldCoins -= badges[badgeIndex].cost;
            }
        }
    }

    string GetRaceName(int? raceid)
    {
        if (races != null && races.Any() && raceid != null)
        {
            NameModel race = races.FirstOrDefault(x => x.id == (int)raceid);
            if (race.id <= 0)
            {
                return "Unknown";
            }
            return race.name;
        }
        else
        {
            return string.Empty;
        }
    }

    string GetRankName(int rankid)
    {
        if (races != null && ranks.Any())
        {
            NameModel rank = ranks.FirstOrDefault(x => x.id == rankid);
            if (rank.id <= 0)
            {
                return "Unknown";
            }
            return rank.name;
        }
        else
        {
            return string.Empty;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (team == null || team.Length == 0)
        {

            team = (await API.GetTeam()).ToArray();
            teamLength = team.Length;
            races = await API.GetRaces();
            ranks = await API.GetRanks();
            badges = await API.GetBadges();
            badgesLength = badges.Length;
            var idstr = await LocalStore.GetItemAsync<string>("auth");
            if(idstr != null){
                id = int.Parse(idstr);
                goldCoins = team.FirstOrDefault(x => x.id == id).goldCoins;
            }
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.InitUIComponents();
        }
    }
}