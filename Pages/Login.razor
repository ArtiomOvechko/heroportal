@using Core

@inject IHeroApi API
@inject NavigationManager Navigation
@inject ILogger Logger
@inject Blazored.LocalStorage.ILocalStorageService LocalStore

@page "/login"

<div style="height: 100%" class="@ContentClass">
    <div class="text-center">
        <form class="form-signin">
            <img class="mb-4" src="./images/icon.png" alt="" width="144" height="144">
            <h1 class="h3 mb-3 font-weight-normal">Enter the Dungeon</h1>
            <label for="inputEmail" class="sr-only">Email address</label>
            <input @bind="model.Email" type="email" id="inputEmail" class="form-control" placeholder="Email address" required autofocus>
            <label for="inputPassword" class="sr-only">Password</label>
            <input @bind="model.Password" type="password" id="inputPassword" class="form-control" placeholder="Password" required>
            <button @onclick="LogIn" class="btn btn-lg btn-primary btn-block" type="submit">GO</button>
        </form>
    </div>
</div>
<div style="height: 100%" class="@LoadingClass">
    <div class="d-flex justify-content-center" style="height: 100%;width: 100%;">
        <div class="d-flex flex-column justify-content-center">
            <div>
                <a href="#" style="border: none;" class="thumbnail achievement-badge">
                    <img src="./images/SceletonMovesRight.gif" alt="..." width="128px" height="128px">
                    <h1>Loading...</h1>
                </a>
            </div>
        </div>
    </div>
</div>

@code
{ 
    bool isLoading = false;

    LoginModel model;

    string ContentClass => isLoading ? "hidden" : null;
    string LoadingClass => isLoading ? null : "hidden";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            API.LoggedIn += (sender, e) =>
            {
                isLoading = false;
                Navigation.NavigateTo("/");
            };

            await API.LogOut();
        }
    }

    private async Task LogIn()
    {
        isLoading = true;
        await API.LogIn(new LoginModel()
        {
            Email = model.Email,
            Password = model.Password
        });
        isLoading = false;
    }

} 

