@using Core

@inject IInteropService Interop;
@inject IHeroApi API;
@inject ILogger Logger;

@page "/"

<div class="page-header">
  <h1>Profile</h1>
</div>
<div class="container">
    <div class="row">
        <div class="col-6">
            <div class="media">
            <div class="media-left">
                <a href="#">
                <img class="media-object" src="@model.imageUrl" width="128px" height="128px" alt="...">
                </a>
            </div>
            <div class="media-body">
                <div class="d-flex align-content-stretch flex-column" style="height: 128px;">
                    <div>
                        <h2 class="profile-nickname">@model.nickName</h2>
                        @model.name
                    </div>
                    <div class="profile-race mt-auto"><h3>@GetRaceName() @GetRankName()</h3></div>
                </div>
            </div>
            </div>
        </div>
        <div class="col-6">
            <div class="d-flex align-content-stretch flex-column" style="height: 128px;">
                <div class="mb-auto">
                    <div class="d-flex justify-content-between">
                        <div class="mr-auto"><h4>@model.level level</h4></div>
                        <div><h4>@model.pointsToNextLevel xp to @model.nextlevel level</h4></div>
                    </div>
                </div>
                <div>
                    <div class="progress">
                        <div class="progress-bar progress-bar-info progress-bar-striped" role="progressbar" aria-valuenow="@model.levelCompleted" aria-valuemin="0" aria-valuemax="100" style="width: @model.levelCompleted%;">
                            <span class="sr-only">@model.levelCompleted% Complete</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row profile-section">
        <div class="col">
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Skills</h3>
                </div>
                <div class="panel-body overflow-hidden" style="max-height:250px;">
                    <div class="container">
                        @for (int i = 0; i < @skillsLength; i++)
                        {
            <div class="row">
                <div class="col-3">
                    @skills[i].name
                </div>
                <div class="col-2 d-flex flex-column justify-content-center">
                    <div class="d-flex justify-content-end">
                        <span class="glyphicon glyphicon-star" style="color:@skills[i].colorName1" aria-hidden="true"></span>
                        <span class="glyphicon glyphicon-star" style="color:@skills[i].colorName2" aria-hidden="true"></span>
                        <span class="glyphicon glyphicon-star" style="color:@skills[i].colorName3" aria-hidden="true"></span>
                    </div>
                </div>
                <div class="col-6 d-flex align-content-stretch flex-column">
                    <div class="mb-auto">
                        @skills[i].points points
                    </div>
                    <div>
                        <div class="progress">
                            <div class="progress-bar progress-bar-info progress-bar-striped" role="progressbar" aria-valuenow="@skills[i].points" aria-valuemin="0" aria-valuemax="100" style="width: @skills[i].points%;">
                                <span class="sr-only">@skills[i].points% Complete</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>}
                    </div>
                </div>
            </div>

            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">OKR Goal</h3>
                </div>
                <div class="panel-body overflow-hidden" style="max-height:250px;">
                    <div class="container">
            <div class="row">
                <div class="col-3">
                    Learning Python
                </div>
                <div class="col-2 d-flex flex-column justify-content-center">
                    <div class="d-flex justify-content-end">
                        <span class="glyphicon glyphicon-star" style="color:yellow" aria-hidden="true"></span>
                        <span class="glyphicon glyphicon-star" style="color:orange" aria-hidden="true"></span>
                        <span class="glyphicon glyphicon-star" style="color:red" aria-hidden="true"></span>
                    </div>
                </div>
                <div class="col-6 d-flex align-content-stretch flex-column">
                    <div class="mb-auto">
                        68 points
                    </div>
                    <div>
                        <div class="progress">
                            <div class="progress-bar progress-bar-info progress-bar-striped" role="progressbar" aria-valuenow="68" aria-valuemin="0" aria-valuemax="100" style="width: 68%;">
                                <span class="sr-only">68% Complete</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-warning">
                <div class="panel-heading">
                    <h3 class="panel-title">Achievements</h3>
                </div>
                <div class="panel-body d-flex justify-content-between">
                    @for (int i = 0; i < achievementsLength; i++)
                    {
        <div>
            <a href="#" data-toggle="tooltip" title="Get 3 starts in a skill" class="thumbnail achievement-badge">
                <img src="@achievements[i].imageUrl" alt="..." width="64px" height="64px">
                @achievements[i].name
            </a>
        </div>}
                </div>
            </div>

            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title">Badges</h3>
                </div>
                <div class="panel-body d-flex justify-content-between">
                    @for (int i = 0; i < badgesLength; i++)
                    {
        <div>
            <a href="#" class="thumbnail achievement-badge">
                <img src="@badges[i].imageUrl" alt="..." width="64px" height="64px">
                @badges[i].name
            </a>
        </div>}
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    ProfileModel model;

    NameModel[] ranks;
    NameModel[] races;

    SkillModel[] skills;
    int skillsLength = 0;

    AchievementModel[] achievements;
    int achievementsLength = 0;

    BadgeModel[] badges;
    int badgesLength = 0;

    string[,] skillColor = new string[4, 3]
    {{ "yellow", "yellow", "orange" },
            { "yellow", "yellow", "yellow" },
            { "yellow", "yellow", "yellow" },
            {"yellow", "orange", "orange" }};

    string GetRaceName()
    {
        if (races != null && races.Any())
        {
            NameModel race = races.FirstOrDefault(x => x.id == model.race);
            if (race.id <= 0)
            {
                return "Unknown";
            }
            return race.name;
        }
        else
        {
            return string.Empty;
        }
    }

    string GetRankName()
    {
        if (races != null && ranks.Any())
        {
            NameModel rank = ranks.FirstOrDefault(x => x.id == model.rank);
            if (rank.id <= 0)
            {
                return "Unknown";
            }
            return rank.name;
        }
        else
        {
            return string.Empty;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (model.id == 0)
        {
            model = await API.GetProfile();

            skills = model.skills.ToArray();
            skillsLength = skills.Length;
            for (int i= 0; i < skills.Length; i++) {
                skills[i].colorName1 = skillColor[i, 0];
                skills[i].colorName2 = skillColor[i, 1];
                skills[i].colorName3 = skillColor[i, 2];
            }

            achievements = model.achievements.ToArray();
            achievementsLength = achievements.Length;

            badges = model.badges.ToArray();
            badgesLength = badges.Length;

            races = await API.GetRaces();
            ranks = await API.GetRanks();
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.InitUIComponents();
        }
    }
}